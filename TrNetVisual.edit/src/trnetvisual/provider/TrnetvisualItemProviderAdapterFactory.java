/**
 */
package trnetvisual.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import trnetvisual.util.TrnetvisualAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TrnetvisualItemProviderAdapterFactory extends TrnetvisualAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrnetvisualItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.TrNetModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TrNetModelItemProvider trNetModelItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.TrNetModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTrNetModelAdapter()
  {
    if (trNetModelItemProvider == null)
    {
      trNetModelItemProvider = new TrNetModelItemProvider(this);
    }

    return trNetModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.EdgePattern} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EdgePatternItemProvider edgePatternItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.EdgePattern}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEdgePatternAdapter()
  {
    if (edgePatternItemProvider == null)
    {
      edgePatternItemProvider = new EdgePatternItemProvider(this);
    }

    return edgePatternItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.Pattern} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PatternItemProvider patternItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.Pattern}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPatternAdapter()
  {
    if (patternItemProvider == null)
    {
      patternItemProvider = new PatternItemProvider(this);
    }

    return patternItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.Same} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SameItemProvider sameItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.Same}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSameAdapter()
  {
    if (sameItemProvider == null)
    {
      sameItemProvider = new SameItemProvider(this);
    }

    return sameItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.Different} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DifferentItemProvider differentItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.Different}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDifferentAdapter()
  {
    if (differentItemProvider == null)
    {
      differentItemProvider = new DifferentItemProvider(this);
    }

    return differentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.AttributePattern} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributePatternItemProvider attributePatternItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.AttributePattern}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAttributePatternAdapter()
  {
    if (attributePatternItemProvider == null)
    {
      attributePatternItemProvider = new AttributePatternItemProvider(this);
    }

    return attributePatternItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.Keep} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeepItemProvider keepItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.Keep}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createKeepAdapter()
  {
    if (keepItemProvider == null)
    {
      keepItemProvider = new KeepItemProvider(this);
    }

    return keepItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.MandatoryNode} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MandatoryNodeItemProvider mandatoryNodeItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.MandatoryNode}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMandatoryNodeAdapter()
  {
    if (mandatoryNodeItemProvider == null)
    {
      mandatoryNodeItemProvider = new MandatoryNodeItemProvider(this);
    }

    return mandatoryNodeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.OptionalNode} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptionalNodeItemProvider optionalNodeItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.OptionalNode}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOptionalNodeAdapter()
  {
    if (optionalNodeItemProvider == null)
    {
      optionalNodeItemProvider = new OptionalNodeItemProvider(this);
    }

    return optionalNodeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.Combinator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CombinatorItemProvider combinatorItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.Combinator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCombinatorAdapter()
  {
    if (combinatorItemProvider == null)
    {
      combinatorItemProvider = new CombinatorItemProvider(this);
    }

    return combinatorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.External} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalItemProvider externalItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.External}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalAdapter()
  {
    if (externalItemProvider == null)
    {
      externalItemProvider = new ExternalItemProvider(this);
    }

    return externalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.AnyResult} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnyResultItemProvider anyResultItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.AnyResult}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAnyResultAdapter()
  {
    if (anyResultItemProvider == null)
    {
      anyResultItemProvider = new AnyResultItemProvider(this);
    }

    return anyResultItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.SomeResult} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SomeResultItemProvider someResultItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.SomeResult}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSomeResultAdapter()
  {
    if (someResultItemProvider == null)
    {
      someResultItemProvider = new SomeResultItemProvider(this);
    }

    return someResultItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.AnyOperand} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnyOperandItemProvider anyOperandItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.AnyOperand}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAnyOperandAdapter()
  {
    if (anyOperandItemProvider == null)
    {
      anyOperandItemProvider = new AnyOperandItemProvider(this);
    }

    return anyOperandItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.SomeOperand} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SomeOperandItemProvider someOperandItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.SomeOperand}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSomeOperandAdapter()
  {
    if (someOperandItemProvider == null)
    {
      someOperandItemProvider = new SomeOperandItemProvider(this);
    }

    return someOperandItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.AntiOperand} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AntiOperandItemProvider antiOperandItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.AntiOperand}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAntiOperandAdapter()
  {
    if (antiOperandItemProvider == null)
    {
      antiOperandItemProvider = new AntiOperandItemProvider(this);
    }

    return antiOperandItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.OptionalOperand} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptionalOperandItemProvider optionalOperandItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.OptionalOperand}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOptionalOperandAdapter()
  {
    if (optionalOperandItemProvider == null)
    {
      optionalOperandItemProvider = new OptionalOperandItemProvider(this);
    }

    return optionalOperandItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.Next} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NextItemProvider nextItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.Next}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNextAdapter()
  {
    if (nextItemProvider == null)
    {
      nextItemProvider = new NextItemProvider(this);
    }

    return nextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.Eventually} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventuallyItemProvider eventuallyItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.Eventually}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEventuallyAdapter()
  {
    if (eventuallyItemProvider == null)
    {
      eventuallyItemProvider = new EventuallyItemProvider(this);
    }

    return eventuallyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.NextDerived} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NextDerivedItemProvider nextDerivedItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.NextDerived}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNextDerivedAdapter()
  {
    if (nextDerivedItemProvider == null)
    {
      nextDerivedItemProvider = new NextDerivedItemProvider(this);
    }

    return nextDerivedItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalAttributeCalculationCall} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalAttributeCalculationCallItemProvider externalAttributeCalculationCallItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalAttributeCalculationCall}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalAttributeCalculationCallAdapter()
  {
    if (externalAttributeCalculationCallItemProvider == null)
    {
      externalAttributeCalculationCallItemProvider = new ExternalAttributeCalculationCallItemProvider(this);
    }

    return externalAttributeCalculationCallItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalConditionCall} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalConditionCallItemProvider externalConditionCallItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalConditionCall}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalConditionCallAdapter()
  {
    if (externalConditionCallItemProvider == null)
    {
      externalConditionCallItemProvider = new ExternalConditionCallItemProvider(this);
    }

    return externalConditionCallItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalActionCall} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalActionCallItemProvider externalActionCallItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalActionCall}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalActionCallAdapter()
  {
    if (externalActionCallItemProvider == null)
    {
      externalActionCallItemProvider = new ExternalActionCallItemProvider(this);
    }

    return externalActionCallItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalAttributeCalculationCallParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalAttributeCalculationCallParameterItemProvider externalAttributeCalculationCallParameterItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalAttributeCalculationCallParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalAttributeCalculationCallParameterAdapter()
  {
    if (externalAttributeCalculationCallParameterItemProvider == null)
    {
      externalAttributeCalculationCallParameterItemProvider = new ExternalAttributeCalculationCallParameterItemProvider(this);
    }

    return externalAttributeCalculationCallParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalConditionCallParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalConditionCallParameterItemProvider externalConditionCallParameterItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalConditionCallParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalConditionCallParameterAdapter()
  {
    if (externalConditionCallParameterItemProvider == null)
    {
      externalConditionCallParameterItemProvider = new ExternalConditionCallParameterItemProvider(this);
    }

    return externalConditionCallParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalActionCallParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalActionCallParameterItemProvider externalActionCallParameterItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalActionCallParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalActionCallParameterAdapter()
  {
    if (externalActionCallParameterItemProvider == null)
    {
      externalActionCallParameterItemProvider = new ExternalActionCallParameterItemProvider(this);
    }

    return externalActionCallParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ParameterRef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterRefItemProvider parameterRefItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ParameterRef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParameterRefAdapter()
  {
    if (parameterRefItemProvider == null)
    {
      parameterRefItemProvider = new ParameterRefItemProvider(this);
    }

    return parameterRefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalCalculationCall} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalCalculationCallItemProvider externalCalculationCallItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalCalculationCall}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalCalculationCallAdapter()
  {
    if (externalCalculationCallItemProvider == null)
    {
      externalCalculationCallItemProvider = new ExternalCalculationCallItemProvider(this);
    }

    return externalCalculationCallItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link trnetvisual.ExternalCalculationCallParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalCalculationCallParameterItemProvider externalCalculationCallParameterItemProvider;

  /**
   * This creates an adapter for a {@link trnetvisual.ExternalCalculationCallParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExternalCalculationCallParameterAdapter()
  {
    if (externalCalculationCallParameterItemProvider == null)
    {
      externalCalculationCallParameterItemProvider = new ExternalCalculationCallParameterItemProvider(this);
    }

    return externalCalculationCallParameterItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (trNetModelItemProvider != null) trNetModelItemProvider.dispose();
    if (edgePatternItemProvider != null) edgePatternItemProvider.dispose();
    if (patternItemProvider != null) patternItemProvider.dispose();
    if (sameItemProvider != null) sameItemProvider.dispose();
    if (differentItemProvider != null) differentItemProvider.dispose();
    if (attributePatternItemProvider != null) attributePatternItemProvider.dispose();
    if (keepItemProvider != null) keepItemProvider.dispose();
    if (mandatoryNodeItemProvider != null) mandatoryNodeItemProvider.dispose();
    if (optionalNodeItemProvider != null) optionalNodeItemProvider.dispose();
    if (combinatorItemProvider != null) combinatorItemProvider.dispose();
    if (externalItemProvider != null) externalItemProvider.dispose();
    if (anyResultItemProvider != null) anyResultItemProvider.dispose();
    if (someResultItemProvider != null) someResultItemProvider.dispose();
    if (anyOperandItemProvider != null) anyOperandItemProvider.dispose();
    if (someOperandItemProvider != null) someOperandItemProvider.dispose();
    if (antiOperandItemProvider != null) antiOperandItemProvider.dispose();
    if (optionalOperandItemProvider != null) optionalOperandItemProvider.dispose();
    if (nextItemProvider != null) nextItemProvider.dispose();
    if (eventuallyItemProvider != null) eventuallyItemProvider.dispose();
    if (nextDerivedItemProvider != null) nextDerivedItemProvider.dispose();
    if (externalAttributeCalculationCallItemProvider != null) externalAttributeCalculationCallItemProvider.dispose();
    if (externalConditionCallItemProvider != null) externalConditionCallItemProvider.dispose();
    if (externalActionCallItemProvider != null) externalActionCallItemProvider.dispose();
    if (externalAttributeCalculationCallParameterItemProvider != null) externalAttributeCalculationCallParameterItemProvider.dispose();
    if (externalConditionCallParameterItemProvider != null) externalConditionCallParameterItemProvider.dispose();
    if (externalActionCallParameterItemProvider != null) externalActionCallParameterItemProvider.dispose();
    if (parameterRefItemProvider != null) parameterRefItemProvider.dispose();
    if (externalCalculationCallItemProvider != null) externalCalculationCallItemProvider.dispose();
    if (externalCalculationCallParameterItemProvider != null) externalCalculationCallParameterItemProvider.dispose();
  }

}
